apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: aspen-mesh-packet-inspector
  namespace: {{ .Release.Namespace }}
  labels:
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    istio: aspen-mesh-packet-inspector
spec:
  selector:
    # Label to match for service definition
    matchLabels:
      istio: aspen-mesh-packet-inspector
  template:
    metadata:
      labels:
        istio: aspen-mesh-packet-inspector
      annotations:
        sidecar.istio.io/inject: "false"
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9106'
    spec:
{{- if .Values.runOnMaster }}
      tolerations:
      # this toleration is to have the daemonset runnable on master nodes
      # remove it if your masters can't run pods
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
{{- end }}
      serviceAccountName: aspen-mesh-packet-inspector
{{- if .Values.global.priorityClassName }}
      priorityClassName: "{{ .Values.global.priorityClassName }}"
{{- end }}
      imagePullSecrets:
{{- range .Values.global.imagePullSecrets }}
      - name: {{ . }}
{{- end }}
      containers:
      - image: {{ template "aspen-mesh-packet-inspector.imagePath" . }}
        imagePullPolicy: {{ .Values.global.imagePullPolicy }}
        name: aspen-mesh-packet-inspector
        command:
        - "/packet-inspector"
        - "--listen-admin=0.0.0.0:9106"
        - "--listen-grpc=0.0.0.0:20000"
        - "--production-logging"
        - "--tls-root-cert-file={{ .Values.certPath }}/{{ .Values.tlsRootCert }}"
        - "--tls-cert-file={{ .Values.certPath }}/{{ .Values.tlsCert }}"
        - "--tls-key-file={{ .Values.certPath }}/{{ .Values.tlsKey }}"
        - "--analysis-address={{ .Values.analysis.address }}"
        - "--analysis-ca-cert={{ .Values.analysis.certPath }}/{{ .Values.analysis.caCert }}"
        - "--analysis-client-cert={{ .Values.analysis.certPath }}/{{ .Values.analysis.clientCert }}"
        - "--analysis-client-key={{ .Values.analysis.certPath }}/{{ .Values.analysis.clientKey }}"
        - "--maximum-concurrent-messages-to-analysis={{ .Values.analysis.maxConcurrentMessages }}"
        - "--maximum-buffer-memory-percent={{ .Values.daemonSetBufferMemoryPercent }}"
        - "--maximum-error-retries={{ .Values.analysis.maxErrorRetries }}"
        - "--analysis-verbose-request={{ .Values.analysis.verbose }}"
        - "--analysis-reconnect-time={{ .Values.analysis.reconnectTime }}"
        ports:
        - containerPort: 20000
          protocol: TCP
          name: grpc
        - containerPort: 9106
          name: http-admin
        env:
        - name: HELM_CHART_VERSION
          value: {{ .Chart.Version }}
        volumeMounts:
          - name: packet-inspector-certs
            mountPath: {{ .Values.certPath }}
            readOnly: true
          - name: analysis-certs
            mountPath: {{ .Values.analysis.certPath }}
            readOnly: true
        resources:
{{ toYaml .Values.resources | indent 12 }}
      volumes:
      - name: packet-inspector-certs
        secret:
          secretName: istio.aspen-mesh-packet-inspector
      - name: analysis-certs
        secret:
          secretName: istio.aspen-mesh-packet-inspector-analysis
